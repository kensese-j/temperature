import streamlit as st
import numpy as np
from sklearn.preprocessing import LabelEncoder, MinMaxScaler
import subprocess

# V√©rifier si joblib est install√©
try:
    import joblib
    st.write("‚úÖ joblib est bien install√© sur Streamlit Cloud")
except ModuleNotFoundError:
    st.write("‚ùå joblib n'est PAS install√©. Tentative d'installation...")
    subprocess.run(["pip", "install", "joblib"])
 


# Charger le mod√®le entra√Æn√©
model = joblib.load("weather_model20.pkl") 
scaler = joblib.load("minmax_scaler.pkl") 


# Titre de l'application
st.title("üå§Ô∏è Application de Pr√©diction DE LA TEMPERATURE")

# Interface utilisateur pour saisir les donn√©es
st.sidebar.header("Entrez les param√®tres m√©t√©o")

# Entr√©es pour chaque variable du mod√®le
wind_dir = st.sidebar.number_input("Direction du vent (¬∞)", min_value=0, max_value=360, value=90)
app_temp = st.sidebar.number_input("Temp√©rature Ressentis (¬∞C)", min_value=-50.0, max_value=50.0, value=20.0)
wind_spd = st.sidebar.number_input("Vitesse du vent (m/s)", min_value=0.0)
wind_gust_spd = st.sidebar.number_input("Rafales de vent (m/s)", min_value=0.0)
rh = st.sidebar.slider("Humidit√© relative (%)", min_value=0, max_value=100, value=50)
wind_cdir = st.sidebar.selectbox("Wind Cardinal Direction", options=["N", "NE", "E", "SE", "S", "SW", "W", "NW"])
# Bouton pour faire la pr√©diction
if st.sidebar.button("Pr√©dire la temp√©rature"):
    # Initialiser le LabelEncoder pour la direction du vent
    encoder = LabelEncoder()
    wind_directions = ["N", "NE", "E", "SE", "S", "SW", "W", "NW"]
    encoder.fit(wind_directions)

    # Encoder la direction du vent s√©lectionn√©e
    wind_cdir_encoded = encoder.transform([wind_cdir])[0]
    
    # Transformer les donn√©es en format utilisable par le mod√®le
    features = np.array([[wind_dir, wind_spd, wind_gust_spd, rh,app_temp, wind_cdir_encoded]])

    # Appliquer la normalisation (scalage MinMax) aux caract√©ristiques d'entr√©e
    features_scaled = scaler.transform(features)

    # Pr√©diction du mod√®le
    prediction = model.predict(features_scaled)

    # Affichage du r√©sultat
    st.write("üìä Valeurs envoy√©es au mod√®le (normalis√©es) :", features_scaled)
    st.write("Shape des donn√©es envoy√©es :", features_scaled.shape)

    st.subheader("üå¶Ô∏è Pr√©vision de la temp√©rature :")
    temperature = prediction[0]  # R√©cup√©rer uniquement la temp√©rature
    st.write(f"üå°Ô∏è Temp√©rature pr√©vue : **{temperature:.2f}¬∞C**")
